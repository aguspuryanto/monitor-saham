'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';

interface Stock {
  id: string;
  code: string;
  name: string;
  currentPrice: number;
  buyPrice: number;
  stopLoss: number;
  takeProfit: number;
  change: number;
  changePercent: number;
  price: number;
  lastUpdated: string;
}

type SortField = 'code' | 'buyPrice' | 'currentPrice' | 'stopLoss' | 'takeProfit' | '';
type SortDirection = 'asc' | 'desc';

export default function DashboardPage() {
  const { user } = useAuth();
  const router = useRouter();
  
  const [stocks, setStocks] = useState<Stock[]>([]);
  const [newStock, setNewStock] = useState({
    code: '',
    buyPrice: '',
    currentPrice: '',
    stopLoss: '',
    takeProfit: ''
  });
  const [activeTab, setActiveTab] = useState('watchlist');
  const [sortConfig, setSortConfig] = useState<{
    field: SortField;
    direction: SortDirection;
  }>({ field: 'code', direction: 'asc' });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Load saved stocks from localStorage
  useEffect(() => {
    const savedStocks = localStorage.getItem('userStocks');
    if (savedStocks) {
      try {
        const parsedStocks = JSON.parse(savedStocks);
        setStocks(parsedStocks);
      } catch (err) {
        console.error('Error parsing saved stocks:', err);
        setError('Failed to load saved stocks');
      }
    }
    setLoading(false);
  }, []);

  // Save stocks to localStorage when they change
  useEffect(() => {
    if (stocks.length > 0) {
      localStorage.setItem('userStocks', JSON.stringify(stocks));
    }
  }, [stocks]);

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewStock(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle adding a new stock
  const handleAddStock = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newStock.code.trim()) {
      setError('Stock code is required');
      return;
    }

    const newStockItem: Stock = {
      id: Date.now().toString(),
      code: newStock.code.trim().toUpperCase(),
      name: newStock.code.trim().toUpperCase(),
      currentPrice: parseFloat(newStock.currentPrice) || 0,
      buyPrice: parseFloat(newStock.buyPrice) || 0,
      stopLoss: parseFloat(newStock.stopLoss) || 0,
      takeProfit: parseFloat(newStock.takeProfit) || 0,
      change: 0,
      changePercent: 0,
      price: parseFloat(newStock.currentPrice) || 0,
      lastUpdated: new Date().toISOString()
    };

    setStocks(prev => [...prev, newStockItem]);
    
    // Reset form
    setNewStock({
      code: '',
      buyPrice: '',
      currentPrice: '',
      stopLoss: '',
      takeProfit: ''
    });
    setError('');
  };

  // Handle removing a stock
  const handleRemoveStock = (id: string) => {
    setStocks(prev => prev.filter(stock => stock.id !== id));
  };

  // Handle sorting
  const handleSort = (field: SortField) => {
    setSortConfig(prevConfig => ({
      field,
      direction: prevConfig.field === field && prevConfig.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  // Get sort indicator
  const getSortIndicator = (field: SortField) => {
    if (sortConfig.field !== field) return null;
    return sortConfig.direction === 'asc' ? ' ↑' : ' ↓';
  };

  // Sort stocks
  const sortedStocks = useMemo(() => {
    const sortableStocks = [...stocks];
    if (!sortConfig.field) return sortableStocks;

    sortableStocks.sort((a, b) => {
      if (a[sortConfig.field as keyof Stock] < b[sortConfig.field as keyof Stock]) {
        return sortConfig.direction === 'asc' ? -1 : 1;
      }
      if (a[sortConfig.field as keyof Stock] > b[sortConfig.field as keyof Stock]) {
        return sortConfig.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });

    return sortableStocks;
  }, [stocks, sortConfig]);

  // Calculate summary
  const summary = useMemo(() => {
    return stocks.reduce((acc, stock) => {
      const profit = (stock.currentPrice - stock.buyPrice) * 100 / stock.buyPrice;
      return {
        totalInvested: acc.totalInvested + stock.buyPrice,
        currentValue: acc.currentValue + stock.currentPrice,
        totalProfit: acc.totalProfit + (stock.currentPrice - stock.buyPrice),
        totalProfitPercent: acc.totalProfit + profit
      };
    }, {
      totalInvested: 0,
      currentValue: 0,
      totalProfit: 0,
      totalProfitPercent: 0
    });
  }, [stocks]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Stock Monitor</h1>
      
      {/* Add Stock Form */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Add New Stock</h2>
        <form onSubmit={handleAddStock} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Stock Code</label>
              <input
                type="text"
                name="code"
                value={newStock.code}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., BBCA"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Buy Price</label>
              <input
                type="number"
                name="buyPrice"
                value={newStock.buyPrice}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Buy Price"
                step="0.01"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Current Price</label>
              <input
                type="number"
                name="currentPrice"
                value={newStock.currentPrice}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Current Price"
                step="0.01"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Stop Loss</label>
              <input
                type="number"
                name="stopLoss"
                value={newStock.stopLoss}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Stop Loss"
                step="0.01"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Take Profit</label>
              <input
                type="number"
                name="takeProfit"
                value={newStock.takeProfit}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Take Profit"
                step="0.01"
                required
              />
            </div>
          </div>
          <button
            type="submit"
            className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Add Stock
          </button>
          {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
        </form>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div className="bg-white rounded-lg shadow-md p-4">
          <h3 className="text-sm font-medium text-gray-500">Total Invested</h3>
          <p className="text-2xl font-semibold">
            {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(summary.totalInvested)}
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-4">
          <h3 className="text-sm font-medium text-gray-500">Current Value</h3>
          <p className="text-2xl font-semibold">
            {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(summary.currentValue)}
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-4">
          <h3 className="text-sm font-medium text-gray-500">Total Profit/Loss</h3>
          <p className={`text-2xl font-semibold ${summary.totalProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(summary.totalProfit)}
          </p>
        </div>
        <div className="bg-white rounded-lg shadow-md p-4">
          <h3 className="text-sm font-medium text-gray-500">Profit %</h3>
          <p className={`text-2xl font-semibold ${summary.totalProfitPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {summary.totalInvested > 0 ? 
              `${(summary.totalProfitPercent / stocks.length).toFixed(2)}%` : 
              '0.00%'}
          </p>
        </div>
      </div>

      {/* Stocks Table */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('code')}
                >
                  Stock {getSortIndicator('code')}
                </th>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('buyPrice')}
                >
                  Buy Price {getSortIndicator('buyPrice')}
                </th>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('currentPrice')}
                >
                  Current Price {getSortIndicator('currentPrice')}
                </th>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Change
                </th>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('stopLoss')}
                >
                  Stop Loss {getSortIndicator('stopLoss')}
                </th>
                <th 
                  scope="col" 
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                  onClick={() => handleSort('takeProfit')}
                >
                  Take Profit {getSortIndicator('takeProfit')}
                </th>
                <th scope="col" className="relative px-6 py-3">
                  <span className="sr-only">Actions</span>
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sortedStocks.length > 0 ? (
                sortedStocks.map((stock) => {
                  const profit = stock.currentPrice - stock.buyPrice;
                  const profitPercent = (profit / stock.buyPrice) * 100;
                  const isProfit = profit >= 0;
                  
                  return (
                    <tr key={stock.id} className={stock.currentPrice <= stock.stopLoss ? 'bg-red-50' : 
                                               stock.currentPrice >= stock.takeProfit ? 'bg-green-50' : ''}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{stock.code}</div>
                            <div className="text-sm text-gray-500">{stock.name}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(stock.buyPrice)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(stock.currentPrice)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isProfit ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                          {isProfit ? '↑' : '↓'} {Math.abs(profitPercent).toFixed(2)}%
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(stock.stopLoss)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(stock.takeProfit)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => handleRemoveStock(stock.id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Remove
                        </button>
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td colSpan={7} className="px-6 py-4 text-center text-sm text-gray-500">
                    No stocks added yet. Add your first stock above.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
